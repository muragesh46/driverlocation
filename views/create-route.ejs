<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Create Route - Dispatch Dashboard</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://unpkg.com/leaflet/dist/leaflet.css"/>
    <style>
        .stop-input { margin-bottom: 10px; }
        .remove-stop { border: none; background: none; color: #dc3545; font-size: 1.2em; }
        .route-preview { background: #f8f9fa; border-radius: 8px; padding: 15px; margin-top: 20px; }
        #map { height: 300px; margin-top: 15px; }
    </style>
</head>
<body>
<nav class="navbar navbar-expand-lg navbar-dark bg-dark">
    <div class="container">
        <a class="navbar-brand" href="/">ðŸš› Dispatch Central</a>
        <div class="navbar-nav ms-auto">
            <a class="nav-link" href="/">Dashboard</a>
            <a class="nav-link" href="/drivers">Drivers</a>
        </div>
    </div>
</nav>

<div class="container mt-4">
    <div class="row justify-content-center">
        <div class="col-md-8">
            <div class="card">
                <div class="card-header">
                    <h5>Create New Route</h5>
                </div>
                <div class="card-body">
                    <form action="/api/routes" method="POST" id="routeForm">
                        <div class="mb-3">
                            <label for="routeName" class="form-label">Route Name</label>
                            <input type="text" class="form-control" id="routeName" name="name" placeholder="e.g., Morning Deliveries - Zone A" required>
                        </div>

                        <div class="mb-3">
                            <label for="driver" class="form-label">Assign Driver</label>
                            <select class="form-select" id="driver" name="driverId" required>
                                <option value="">Select a driver...</option>
                                <% drivers.forEach(driver => { %>
                                    <option value="<%= driver._id %>"><%= driver.name %> (<%= driver.phone %>)</option>
                                <% }); %>
                            </select>
                            <% if (drivers.length === 0) { %>
                                <div class="form-text text-danger">No drivers available. <a href="/drivers">Add drivers first</a>.</div>
                            <% } %>
                        </div>

                        <div class="mb-3">
                            <label class="form-label">Stops/Addresses</label>
                            <div id="stopsContainer">
                                <div class="input-group stop-input">
                                    <span class="input-group-text">1</span>
                                    <input type="text" class="form-control" name="addresses" placeholder="Enter full address (e.g., 123 Main St, New York, NY 10001)" required>
                                </div>
                                <div class="input-group stop-input">
                                    <span class="input-group-text">2</span>
                                    <input type="text" class="form-control" name="addresses" placeholder="Enter full address" required>
                                </div>
                            </div>
                            <button type="button" class="btn btn-outline-primary btn-sm" onclick="addStop()">+ Add Stop</button>
                            <div class="form-text">Add at least 2 stops. The system will optimize the route order automatically.</div>
                        </div>

                        <div class="route-preview">
                            <h6>Route Preview</h6>
                            <div id="routePreview">
                                <p class="text-muted">Fill in the stops above to see route preview...</p>
                            </div>
                            <div id="map"></div>
                        </div>

                        <div class="mt-4 d-flex gap-2">
                            <button type="submit" class="btn btn-primary">Create Route & Optimize</button>
                            <a href="/" class="btn btn-secondary">Cancel</a>
                        </div>
                    </form>
                </div>
            </div>
        </div>

        <div class="col-md-4">
            <div class="card">
                <div class="card-header"><h6>ðŸ“‹ How it Works</h6></div>
                <div class="card-body">
                    <ol class="small">
                        <li><strong>Route Name:</strong> Give your route a descriptive name</li>
                        <li><strong>Assign Driver:</strong> Choose from available drivers</li>
                        <li><strong>Add Stops:</strong> Enter full addresses with city and ZIP</li>
                        <li><strong>Auto-Optimize:</strong> System will calculate best route order</li>
                        <li><strong>Driver Gets Route:</strong> Assigned driver receives optimized stops on mobile app</li>
                    </ol>
                    <hr>
                    <h6 class="small">ðŸ’¡ Tips:</h6>
                    <ul class="small text-muted">
                        <li>Use complete addresses for better routing</li>
                        <li>Add stops in any order - we'll optimize</li>
                        <li>Driver can mark stops complete in real-time</li>
                        <li>You'll track driver live on dashboard</li>
                    </ul>
                    <hr>
                    <div class="text-center">
                        <a href="/drivers" class="btn btn-outline-primary btn-sm">Manage Drivers</a>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"></script>
<script src="https://unpkg.com/leaflet/dist/leaflet.js"></script>
<script>
    let stopCounter = 2;
    
    // Initialize map with India bounds
    const indiaBounds = [
        [6.5546, 68.1114],  // Southwest (lat, lng)  
        [35.6745, 97.3956]  // Northeast (lat, lng)
    ];
    
    let map = L.map('map', {
        maxBounds: indiaBounds,
        maxBoundsViscosity: 1.0,  // prevents dragging outside
        minZoom: 5,
        maxZoom: 18
    }).setView([20.5937, 78.9629], 5); // Center of India
    
    L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', { 
        attribution: 'Â© OpenStreetMap contributors',
        bounds: indiaBounds  // Restrict tile loading to India bounds
    }).addTo(map);
    
    let markers = [], routeLine = null;

    function addStop() {
        stopCounter++;
        const container = document.getElementById('stopsContainer');
        const newStop = document.createElement('div');
        newStop.className = 'input-group stop-input';
        newStop.innerHTML = `
        <span class="input-group-text">${stopCounter}</span>
        <input type="text" class="form-control" name="addresses" placeholder="Enter full address" required>
        <button type="button" class="btn btn-outline-danger remove-stop" onclick="removeStop(this)">Ã—</button>
    `;
        container.appendChild(newStop);
        updateRoutePreview();
    }

    function removeStop(button) {
        if (document.querySelectorAll('.stop-input').length > 2) {
            button.parentElement.remove();
            renumberStops();
            updateRoutePreview();
        } else { alert('Route must have at least 2 stops'); }
    }

    function renumberStops() {
        const stops = document.querySelectorAll('.stop-input');
        stops.forEach((stop, index) => stop.querySelector('.input-group-text').textContent = index + 1);
        stopCounter = stops.length;
    }

    function updateRoutePreview() {
        const addresses = Array.from(document.querySelectorAll('input[name="addresses"]'))
            .map(input => input.value.trim())
            .filter(addr => addr.length > 0);
        const driverSelect = document.getElementById('driver');
        const selectedDriver = driverSelect.options[driverSelect.selectedIndex];
        const preview = document.getElementById('routePreview');

        if (addresses.length === 0) {
            preview.innerHTML = '<p class="text-muted">Fill in the stops above to see route preview...</p>';
            return;
        }

        let previewHtml = '';
        if (selectedDriver && selectedDriver.value) previewHtml += `<p><strong>Driver:</strong> ${selectedDriver.text}</p>`;
        previewHtml += `<p><strong>Stops (${addresses.length}):</strong></p><ol>`;
        addresses.forEach(addr => previewHtml += `<li>${addr}</li>`);
        previewHtml += '</ol>';
        previewHtml += `<div class="alert alert-info alert-sm mt-2" role="alert">
        <small><i class="bi bi-info-circle"></i> System will optimize the order of these stops for shortest route.</small>
    </div>`;
        preview.innerHTML = previewHtml;

        // Clear old markers and route
        markers.forEach(m => map.removeLayer(m));
        markers = [];
        if (routeLine) { map.removeLayer(routeLine); routeLine = null; }

        // Get coordinates for addresses
        Promise.all(addresses.map(addr =>
            fetch(`https://nominatim.openstreetmap.org/search?format=json&q=${encodeURIComponent(addr)}`)
                .then(res => res.json())
                .then(data => data && data.length ? { lat: parseFloat(data[0].lat), lon: parseFloat(data[0].lon), address: addr } : null)
        )).then(points => {
            points = points.filter(Boolean);
            if (!points.length) return;

            points.forEach(p => markers.push(L.marker([p.lat, p.lon]).addTo(map).bindPopup(p.address)));
            map.fitBounds(L.featureGroup(markers).getBounds());

            const coordsStr = points.map(p => `${p.lon},${p.lat}`).join(';');
            fetch(`https://router.project-osrm.org/route/v1/driving/${coordsStr}?overview=full&geometries=geojson`)
                .then(res => res.json())
                .then(data => {
                    if (data.routes && data.routes.length > 0) routeLine = L.geoJSON(data.routes[0].geometry, { color: 'blue', weight: 4 }).addTo(map);
                });
        });
    }

    document.getElementById('routeForm').addEventListener('input', updateRoutePreview);
    document.getElementById('driver').addEventListener('change', updateRoutePreview);

    document.getElementById('routeForm').addEventListener('submit', function(e) {
        const addresses = Array.from(document.querySelectorAll('input[name="addresses"]')).map(i => i.value.trim()).filter(a => a.length > 0);
        if (addresses.length < 2) { e.preventDefault(); alert('Please add at least 2 stops for the route.'); return; }
        if (!document.getElementById('driver').value) { e.preventDefault(); alert('Please select a driver for this route.'); return; }

        const submitBtn = document.querySelector('button[type="submit"]');
        submitBtn.innerHTML = '<span class="spinner-border spinner-border-sm me-2"></span>Creating Route...';
        submitBtn.disabled = true;
    });
</script>
</body>
</html>